import at.jku.isse.ecco.plugin.artifact.emf.EmfReader;
import at.jku.isse.ecco.tree.Node;
import at.jku.isse.ecco.util.Trees;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.EcoreResourceFactoryImpl;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

import at.jku.isse.ecco.dao.PerstEntityFactory;

import java.net.URL;
import java.util.Set;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'hhoyos' at '12/05/17 10:37' with Gradle 2.4
 *
 * @author hhoyos, @date 12/05/17 10:37
 */
public class EmfReaderTest {

    @Test
    public void testRegisterMetamodelFromEcore() {
        EmfReader reader = new EmfReader(new PerstEntityFactory(), new ResourceSetImpl());
        ClassLoader classLoader = getClass().getClassLoader();
        URI uri = URI.createURI(classLoader.getResource("Library.ecore").toString());
        reader.registerMetamodel(uri);
        assertTrue(reader.getResourceSet().getPackageRegistry().containsKey("http://www.eclipse.org/emf/jcrm/samples/emf/sample/Library"));
    }

    @Test
    public void testRegisterMetamodelFromEPackage() {

        ResourceSetImpl resourceSet = new ResourceSetImpl();
        EmfReader reader = new EmfReader(new PerstEntityFactory(), resourceSet);
        ClassLoader classLoader = getClass().getClassLoader();
        URI uri = URI.createURI(classLoader.getResource("Library.ecore").toString());
        Resource r = resourceSet.getResource(uri, true);
        EObject eObject = r.getContents().get(0);
        assertTrue(eObject instanceof EPackage);
        EPackage p = (EPackage)eObject;
        reader.registerMetamodel(p);
        assertTrue(reader.getResourceSet().getPackageRegistry().containsKey(p.getNsURI()));
    }

    @Test
    public void testCanRead() {
        EmfReader reader = new EmfReader(new PerstEntityFactory(), new ResourceSetImpl());
        ClassLoader classLoader = getClass().getClassLoader();
        URI uri = URI.createURI(classLoader.getResource("Library.xmi").toString());
        boolean canread = reader.canRead(uri);
        assertTrue(canread);
        uri = uri.appendFileExtension(".err");
        canread = reader.canRead(uri);
        assertFalse(canread);
    }
    
    @Test public void testRead() {

        EmfReader reader = new EmfReader(new PerstEntityFactory(), new ResourceSetImpl());
        ClassLoader classLoader = getClass().getClassLoader();
        URI uri = URI.createURI(classLoader.getResource("Library.xmi").toString());
        Set<Node> nodes = reader.read(new URI[]{uri});
        assertEquals(1, nodes.size());
        Node root = nodes.iterator().next();
        assertEquals(51, root.countArtifacts());
        assertEquals(7, root.getChildren().size());
    }
}
